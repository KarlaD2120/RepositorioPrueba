import javax.swing.JPanel;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.*;
import java.util.Date;
import javax.swing.ImageIcon;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Timer;
import java.util.TimerTask;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.JOptionPane;
import java.text.SimpleDateFormat;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author david
 */

public class tablero extends javax.swing.JPanel {
    private boolean halo;
    private boolean halo2;
    private int jugador = 1;
    private int tiempoDado;
    //Vectores de posiciones del fichero
    private final int[] x={230,310,380,450,520,580,650,720,780,840,900,840,770,700,630,560,490,420,350,290,230,290,370,440,510,580,650,720,790,850,900,850,780,700,640,560,500,430,360,290,220,230,300,370,440,510,580,650,720,790,870};
    private final int[] y={470,470,470,480,490,490,490,490,480,460,410,370,350,350,350,350,350,360,350,340,290,250,240,230,240,250,260,270,270,260,200,150,140,140,130,140,140,150,150,140,120,60,40,30,30,20,20,20,30,20,20};
    //a x se le suma 20 y a y 40, llegue hasta 800 en x
    
    private int i = 0;
    private int k = 0;
    private boolean dosJugadores;
    private int tiros_dado1 = 0;
    private int tiros_dado2 = 0;
    private int escaleras_avanzadas1 = 0;
    private int escaleras_avanzadas2 = 0;
    private int serpientes_retrocedidas1 = 0;
    private int serpientes_retrocedidas2 = 0;
    private int desbancos1=0;
    private int desbancos2=0;
    public tablero() {
           initComponents(); 
           dosJugadores=BancoDeVariables.getdosJugadores();
            initComponentesNativosFichero(dosJugadores); 
       }
    
    //Inicializar componentes propios del tablero
    public void initComponentesNativosFichero(boolean dosJugadores){
           ElMeroListenerThread listenerThread = new ElMeroListenerThread();
           listenerThread.start();           
           btnAgain1.setVisible(false);
           btnAtras.setVisible(false);
           btnScore1.setVisible(false);
           lblDados.setVisible(false);
           lblHalo.setVisible(false);
           lblHalo2.setVisible(false);
           halo = BancoDeVariables.getHalo();
           halo2 = BancoDeVariables.getHalo2();           
           panel_tablero.setFocusable(true);
           lblNumeros.setVisible(false);
           btnLanzardados.setVisible(true);
           btnAbandonar.setVisible(true);
           imagen(halo2); 
           imagen2(halo);
           lblPizarra.setVisible(false);
           lblPizarra2.setVisible(false);
           lbldesbancar1.setVisible(false);
           lblNicknameDesbancado.setVisible(false);
           lblNickname.setVisible(false);
           lblNickname1.setVisible(false);  
           if (dosJugadores==true){
               turno();}
               lblHalo.setVisible(true); 
               lblHalo2.setVisible(true);
}
    //listener que siempre estara activo mediante threads
    public class ElMeroListenerThread extends Thread {
    private boolean active = true;       
    @Override
    public void run() {
        while (active) {
            // Actualizo constantemente la posicion del fichero           
            lblHalo.setLocation(x[i],y[i]);
            lblHalo2.setLocation(x[k],y[k]);
            try {
                Thread.sleep(2); //Espera eso antes de volver a verificar
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_tablero = new javax.swing.JPanel();
        lblNicknameDesbancado = new javax.swing.JLabel();
        lbldesbancar1 = new javax.swing.JLabel();
        lblPizarra2 = new javax.swing.JLabel();
        lblNickname = new javax.swing.JLabel();
        lblNickname1 = new javax.swing.JLabel();
        lblPizarra = new javax.swing.JLabel();
        btnLanzardados = new javax.swing.JButton();
        btnAtras = new javax.swing.JButton();
        btnAgain1 = new javax.swing.JButton();
        btnScore1 = new javax.swing.JButton();
        lblGanaste = new javax.swing.JLabel();
        lblDados = new javax.swing.JLabel();
        lblNumeros = new javax.swing.JLabel();
        lblHalo = new javax.swing.JLabel();
        lblHalo2 = new javax.swing.JLabel();
        btnAbandonar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        panel_tablero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                panel_tableroKeyPressed(evt);
            }
        });
        panel_tablero.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblNicknameDesbancado.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 34)); // NOI18N
        lblNicknameDesbancado.setForeground(new java.awt.Color(255, 255, 255));
        lblNicknameDesbancado.setText("dfsdfsdf");
        panel_tablero.add(lblNicknameDesbancado, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 620, 260, 60));

        lbldesbancar1.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 32)); // NOI18N
        lbldesbancar1.setForeground(new java.awt.Color(255, 255, 255));
        lbldesbancar1.setText("ups! desbancaste a");
        panel_tablero.add(lbldesbancar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 620, -1, 60));

        lblPizarra2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/Pizzarra.png"))); // NOI18N
        panel_tablero.add(lblPizarra2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 630, 500, 50));

        lblNickname.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 75)); // NOI18N
        lblNickname.setForeground(new java.awt.Color(255, 255, 255));
        lblNickname.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panel_tablero.add(lblNickname, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 360, 500, 70));

        lblNickname1.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 75)); // NOI18N
        lblNickname1.setForeground(new java.awt.Color(255, 255, 255));
        lblNickname1.setText("Turno de:");
        panel_tablero.add(lblNickname1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 280, -1, -1));

        lblPizarra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/Pizzarra.png"))); // NOI18N
        panel_tablero.add(lblPizarra, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 230, -1, -1));

        btnLanzardados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/Lanzar dados.gif"))); // NOI18N
        btnLanzardados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLanzardadosActionPerformed(evt);
            }
        });
        panel_tablero.add(btnLanzardados, new org.netbeans.lib.awtextra.AbsoluteConstraints(946, 620, 190, 60));

        btnAtras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/Atras.gif"))); // NOI18N
        btnAtras.setPreferredSize(new java.awt.Dimension(200, 90));
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });
        panel_tablero.add(btnAtras, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 480, -1, -1));

        btnAgain1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/De nuevo.gif"))); // NOI18N
        btnAgain1.setPreferredSize(new java.awt.Dimension(200, 90));
        btnAgain1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgain1ActionPerformed(evt);
            }
        });
        panel_tablero.add(btnAgain1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 480, -1, -1));

        btnScore1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/score.gif"))); // NOI18N
        btnScore1.setPreferredSize(new java.awt.Dimension(200, 90));
        btnScore1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScore1ActionPerformed(evt);
            }
        });
        panel_tablero.add(btnScore1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 480, -1, -1));
        panel_tablero.add(lblGanaste, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        lblDados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/dados-4 (1).gif"))); // NOI18N
        panel_tablero.add(lblDados, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 290, -1, -1));
        panel_tablero.add(lblNumeros, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 320, 180, 169));
        panel_tablero.add(lblHalo, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 470, 70, 70));
        panel_tablero.add(lblHalo2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 520, 70, 70));

        btnAbandonar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/Abandonar.gif"))); // NOI18N
        btnAbandonar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbandonarActionPerformed(evt);
            }
        });
        panel_tablero.add(btnAbandonar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 150, 50));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/Tablero.png"))); // NOI18N
        panel_tablero.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_tablero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_tablero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void panel_tableroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_panel_tableroKeyPressed

    }//GEN-LAST:event_panel_tableroKeyPressed

   
    private void btnLanzardadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLanzardadosActionPerformed
                  
            if (jugador == 1) {
                tiros_dado1++;               
            } else if (jugador == 2) {               
                tiros_dado2++;
            }
               
        //Reproducir un sonido de dado
         try {
                File file = new File("SonidoDado.wav");
                AudioInputStream audioIn = AudioSystem.getAudioInputStream(file);
                Clip clip = AudioSystem.getClip();
                clip.open(audioIn);
                clip.start();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        
        //If para single o duo
        if(BancoDeVariables.getdosJugadores()==true){           
            tiempoDado=2500;
            
        }
        else{
            tiros_dado1++;
            tiempoDado=1500;
            lblHalo2.setVisible(false);
        }
        //Linea de codigo para que aparesca el dado por 1.5 segundos
            btnLanzardados.setVisible(false);
            btnAbandonar.setVisible(false);
            lblDados.setVisible(true);
            // Retraso 
            TimerTask task = new TimerTask() {
            public void run() {
                // Acción a realizar cuando se complete el temporizador
                lblDados.setVisible(false);
                //Generar numero aleatoreo entre 1 y 6
                Random random = new Random();
                int randomNumber = random.nextInt(6) + 1;
                    
                switch (randomNumber) {
                    case 6:
                        {
                            System.out.println("Numero seis");
                            String ruta = "/Recursos/seis.png";
                            numeroDado(ruta); 
                            moverFicheros(randomNumber);

                            break;
                        }
                    case 5:
                        {
                            System.out.println("Numero cinco");
                            String ruta = "/Recursos/sinco.png";
                            numeroDado(ruta); 
                            moverFicheros(randomNumber);
                            
                            break;
                        }
                    case 4:
                        {
                            System.out.println("Numero cuatro");
                            String ruta = "/Recursos/cuatro.png";
                            numeroDado(ruta); 
                            moverFicheros(randomNumber);
                            
                            break;
                        }
                    case 3:
                        {
                            System.out.println("Numero tres");
                            String ruta = "/Recursos/tres.png";
                            numeroDado(ruta); 
                            moverFicheros(randomNumber);
                            
                            break;
                        }
                    case 2:
                        {
                            System.out.println("Numero dos");
                            String ruta = "/Recursos/dos.png";
                            numeroDado(ruta);
                            moverFicheros(randomNumber);                           
                            
                            break;
                        }
                    case 1:
                        {
                            System.out.println("Numero uno");
                            String ruta = "/Recursos/uno.png";
                            numeroDado(ruta); 
                            moverFicheros(randomNumber);

                            break;                           
                        }
                    default:
                        break;
                }
                    
            }
        };
        Timer timer = new Timer();
        timer.schedule(task, tiempoDado);
       
            
    }//GEN-LAST:event_btnLanzardadosActionPerformed

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        
        conexionIdMayorTablaJuego();
        Boolean DuoOSingle = BancoDeVariables.getdosJugadores();
        if(DuoOSingle == false){
            conexionTablaRegistroPartidaJugador1();
        }else if(DuoOSingle == true){
            conexionTablaRegistroPartidaJugador1();
            conexionTablaRegistroPartidaJugador2();
        }
        limpiarDatos();
        Inicio b4 = new Inicio();
        showPanel5(b4.getFondo());  
    }//GEN-LAST:event_btnAtrasActionPerformed
    //Base de datos
    private void limpiarDatos(){
        jugador = 1;
        i = 0;
        k = 0;
        escaleras_avanzadas1 = 0;
        escaleras_avanzadas2 = 0;
        serpientes_retrocedidas1 = 0;
        serpientes_retrocedidas2 = 0;
        desbancos1 = 0;
        desbancos2 = 0;
        tiros_dado1 = 0;
        tiros_dado2 = 0;
        BancoDeVariables.setWinJugador1(false);
        BancoDeVariables.setWinJugador2(false);
        
    }
    private void conexionTablaJuego(){
        //Conexion a la base de datos para registrar
        Connection conexion = null;
        PreparedStatement senten = null;
        try {
            //Datos que ingresaremos
            String tipo_juego = BancoDeVariables.getTipoJuego();
            int id_tablero = BancoDeVariables.getidTablero();
            Date fechaHoraActual = new Date();
            Timestamp fechafin = new Timestamp(fechaHoraActual.getTime());
            Timestamp fechaInicio = Timestamp.valueOf(BancoDeVariables.getfecha_inicio());
            System.out.println(tipo_juego);
            System.out.println(id_tablero);
            System.out.println(fechafin);
            System.out.println(fechaInicio);
            //Conexión
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

            String url = "jdbc:sqlserver://localhost:1433;databaseName=Base_Proyecto_Poo4;TrustServerCertificate=True;";
            conexion = DriverManager.getConnection(url, "sa", "12345678");
            // Paso 4: Ejecutar una consulta:
            String consulta = "insert into Juego values (?,?,?,?)";

            senten = conexion.prepareStatement(consulta);
            senten.setString(1, tipo_juego);
            senten.setInt(2, id_tablero);
            senten.setTimestamp(3, fechaInicio);
            senten.setTimestamp(4, fechafin); 
            //Verificacion de conexion     
            int resultado = senten.executeUpdate();
            if (resultado == 0) {
                System.out.println("No se pudo intertar el registro.");
                JOptionPane.showMessageDialog(null, "No se pudo intertar el registro.");
                }
                else {
                    System.out.println("Registro insertado exitosamente.");
                    JOptionPane.showMessageDialog(null, "Registro insertado exitosamente.");
                    }

                } catch (ClassNotFoundException ex) {
                    System.out.println("Error: no se encuentra el archivo de la");
                    System.out.println("clase para la conexión con la base de datos.");
                    ex.printStackTrace();
                } catch (SQLException ex) {
                    System.out.println("Error de conexión a la base de datos.");
                    ex.printStackTrace();
                }catch (Exception ex) { // Agregar este bloque catch adicional
                    System.out.println("Ocurrió una excepción inesperada.");
                    ex.printStackTrace();
                } finally {
                    try {
                        if (senten != null) { // Verificar si senten no es nulo antes de llamar a close()
                            senten.close();
                        }
                        if (conexion != null) { // Verificar si conexion no es nulo antes de llamar a close()
                            conexion.close();
                        }
                    }
                    catch (SQLException ex) {
                        System.out.println("Error en cierre de conexión.");
                    }

                }
    }
    private void conexionIdMayorTablaJuego(){
        String url = "jdbc:sqlserver://localhost:1433;databaseName=Base_Proyecto_Poo4;TrustServerCertificate=True;";
        String user = "sa";
        String password = "12345678";
        
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            
            String query = "SELECT MAX(id_juego) AS MaximoID FROM Juego";
            
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(query);
            
            if (resultSet.next()) {
                int maximoID = resultSet.getInt("MaximoID");
                BancoDeVariables.setIdJuego(maximoID);
                System.out.println("El ID máximo en la tabla 'Juego' es: " + maximoID);
            } else {
                System.out.println("No se encontró ningún ID en la tabla 'Juego'.");
            }
            
            resultSet.close();
            statement.close();
            connection.close();
            
        } catch (SQLException e) {
            e.printStackTrace();
        }
    
    
       
    }
    private void conexionTablaRegistroPartidaJugador1(){
            //Conexion a la base de datos para registrar
        Connection conexion = null;
        PreparedStatement senten = null;
        try {
            System.out.println(tiros_dado1);
            System.out.println(escaleras_avanzadas1);
            System.out.println(serpientes_retrocedidas1);
            //Datos que ingresaremos
            int id_juego = BancoDeVariables.getIdJuego();
            int id_jugador= BancoDeVariables.getIdJugador1();
            boolean jugador_ganador = BancoDeVariables.getWinJugador1();
            int id_ficha = BancoDeVariables.getFichero();
            //tiros_Dado
            //escaleras_avanzadas
            //serpientes_retrocedidas
            //desbancos
            Date fechaHoraActual = new Date();
            Timestamp HoraFecha = new Timestamp(fechaHoraActual.getTime());
            
            //Conexión
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

            String url = "jdbc:sqlserver://localhost:1433;databaseName=Base_Proyecto_Poo4;TrustServerCertificate=True;";
            conexion = DriverManager.getConnection(url, "sa", "12345678");
            // Paso 4: Ejecutar una consulta:
            String consulta = "insert into Registro_Partida values (?,?,?,?,?,?,?,?)";

            senten = conexion.prepareStatement(consulta);
            senten.setInt(1, id_juego);
            senten.setInt(2, id_jugador);
            senten.setBoolean(3, jugador_ganador);
            senten.setInt(4, id_ficha); 
            senten.setInt(5, tiros_dado1); 
            senten.setInt(6, escaleras_avanzadas1); 
            senten.setInt(7, serpientes_retrocedidas1); 
            senten.setInt(8, desbancos1); 
            //Verificacion de conexion     
            int resultado = senten.executeUpdate();
            if (resultado == 0) {
                System.out.println("No se pudo intertar el registro.");
                JOptionPane.showMessageDialog(null, "No se pudo intertar el registro.");
                }
                else {
                    System.out.println("Registro insertado exitosamente.");
                    JOptionPane.showMessageDialog(null, "Registro insertado exitosamente.");
                    }

                } catch (ClassNotFoundException ex) {
                    System.out.println("Error: no se encuentra el archivo de la");
                    System.out.println("clase para la conexión con la base de datos.");
                    ex.printStackTrace();
                } catch (SQLException ex) {
                    System.out.println("Error de conexión a la base de datos.");
                    ex.printStackTrace();
                } finally {
                    try {
                        senten.close();
                        conexion.close();
                    }
                    catch (SQLException ex) {
                        System.out.println("Error en cierre de conexión.");
                    }

                }
    }
    private void conexionTablaRegistroPartidaJugador2(){
            //Conexion a la base de datos para registrar
        Connection conexion = null;
        PreparedStatement senten = null;
        try {
            //Datos que ingresaremos
            int id_juego = BancoDeVariables.getIdJuego();
            int id_jugador2= BancoDeVariables.getIdJugador2();
            boolean jugador_ganador2 = BancoDeVariables.getWinJugador2();
            int id_ficha2 = BancoDeVariables.getFichero2();
            //tiros_Dado
            //escaleras_avanzadas
            //serpientes_retrocedidas
            //desbancos
            Date fechaHoraActual = new Date();
            Timestamp HoraFecha = new Timestamp(fechaHoraActual.getTime());
            
            //Conexión
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

            String url = "jdbc:sqlserver://localhost:1433;databaseName=Base_Proyecto_Poo4;TrustServerCertificate=True;";
            conexion = DriverManager.getConnection(url, "sa", "12345678");
            // Paso 4: Ejecutar una consulta:
            String consulta = "insert into Registro_Partida values (?,?,?,?,?,?,?,?)";

            senten = conexion.prepareStatement(consulta);
            senten.setInt(1, id_juego);
            senten.setInt(2, id_jugador2);
            senten.setBoolean(3, jugador_ganador2);
            senten.setInt(4, id_ficha2); 
            senten.setInt(5, tiros_dado2); 
            senten.setInt(6, escaleras_avanzadas2); 
            senten.setInt(7, serpientes_retrocedidas2); 
            senten.setInt(8, desbancos2); 
            //Verificacion de conexion     
            int resultado = senten.executeUpdate();
            if (resultado == 0) {
                System.out.println("No se pudo intertar el registro.");
                JOptionPane.showMessageDialog(null, "No se pudo intertar el registro.");
                }
                else {
                    System.out.println("Registro insertado exitosamente.");
                    JOptionPane.showMessageDialog(null, "Registro insertado exitosamente.");
                    }

                } catch (ClassNotFoundException ex) {
                    System.out.println("Error: no se encuentra el archivo de la");
                    System.out.println("clase para la conexión con la base de datos.");
                    ex.printStackTrace();
                } catch (SQLException ex) {
                    System.out.println("Error de conexión a la base de datos.");
                    ex.printStackTrace();
                } finally {
                    try {
                        senten.close();
                        conexion.close();
                    }
                    catch (SQLException ex) {
                        System.out.println("Error en cierre de conexión.");
                    }

                }
    }
    
    private void btnAgain1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgain1ActionPerformed
            
        conexionIdMayorTablaJuego();
        Boolean DuoOSingle = BancoDeVariables.getdosJugadores();
        if(DuoOSingle == false){
            conexionTablaRegistroPartidaJugador1();
        }else if(DuoOSingle == true){
            conexionTablaRegistroPartidaJugador1();
            conexionTablaRegistroPartidaJugador2();
        }
        limpiarDatos();
        
        Date fechaHoraActual = new Date();
        Timestamp HoraFecha = new Timestamp(fechaHoraActual.getTime());
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String fecha_inicio = dateFormat.format(HoraFecha);
        BancoDeVariables.setfecha_inicio(fecha_inicio);
        
        tablero b4 = new tablero();
        showPanel5(b4.getFondo5());        
    }//GEN-LAST:event_btnAgain1ActionPerformed

    private void btnAbandonarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbandonarActionPerformed
        int opcion = JOptionPane.showConfirmDialog(null, "¿Desea abandonar la partida?\nLos datos no se guardarán.", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (opcion == JOptionPane.YES_OPTION) {
            Inicio b4 = new Inicio();
            showPanel5(b4.getFondo());  
            System.out.println("El usuario ha salido del juego.");
        }
    }//GEN-LAST:event_btnAbandonarActionPerformed

    private void btnScore1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScore1ActionPerformed
        conexionIdMayorTablaJuego();
        Boolean DuoOSingle = BancoDeVariables.getdosJugadores();
        if(DuoOSingle == false){
            conexionTablaRegistroPartidaJugador1();
        }else if(DuoOSingle == true){
            conexionTablaRegistroPartidaJugador1();
            conexionTablaRegistroPartidaJugador2();
        }
        limpiarDatos();
        Puntuaciones a1 = new Puntuaciones();
        showPanel5(a1.getFondo()); 
    }//GEN-LAST:event_btnScore1ActionPerformed
    
    public void turno(){
        //Mostrar de quien es el turno
        if (jugador == 1) {
            String nombreJugador = BancoDeVariables.getjugador1();
            System.out.println("Turno de " + nombreJugador);
            lblNickname.setText(nombreJugador);
            lblPizarra.setVisible(true);
            lblNickname.setVisible(true);
            lblNickname1.setVisible(true);
            jugador=2;
        } else if (jugador == 2) {
            String nombreJugador2 = BancoDeVariables.getjugador2();
            System.out.println("Turno de " + nombreJugador2);
            lblNickname.setText(nombreJugador2);
            lblPizarra.setVisible(true);
            lblNickname.setVisible(true);
            lblNickname1.setVisible(true);
            jugador=1;
        }
        int delay2 = 900; // Retraso de 1.5 segundos (3000 milisegundos)
        TimerTask task2 = new TimerTask() { //Averiguar bien que esto
            public void run() {
                // Acción a realizar cuando se complete el temporizador
                lblPizarra.setVisible(false);
                lblNickname.setVisible(false);
                lblNickname1.setVisible(false);
            }
        };
        Timer timer2 = new Timer();
        timer2.schedule(task2, delay2);
        
 
    }
    public void numeroDado(String ruta){
  
        //Lanzamiento de dados
        ImageIcon ico2 = new ImageIcon(getClass().getResource(ruta));
        lblNumeros.setVisible(true);
        lblNumeros.setIcon(ico2);
        int delay = 1000; // Retraso de 1.5 segundos (3000 milisegundos)
        TimerTask task = new TimerTask() { //Averiguar bien que esto
            public void run() {
                // Acción a realizar cuando se complete el temporizador
                lblNumeros.setVisible(false);
                
            }
        };
        Timer timer = new Timer();
        timer.schedule(task, delay);
 
    }
    public void moverFicheros(int randomNumber){
        if(BancoDeVariables.getdosJugadores()==true){           
            if (jugador == 1) {
                lblHalo.setVisible(true);
                lblHalo2.setVisible(true);
                movimientoFichero2(randomNumber);
            } else if (jugador == 2) {               
                lblHalo.setVisible(true);
                lblHalo2.setVisible(true);
                movimientoFichero(randomNumber);
            }
        
        }
        else if(BancoDeVariables.getdosJugadores()==false){   
            movimientoFichero(randomNumber);
        }
    }
    public void movimientoFichero(int randomNumber){
            //int j=1;
            if (i <=50 ){
                    btnLanzardados.setVisible(false);
                    
                 
           try {
                                Thread.sleep(1500);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(tablero.class.getName()).log(Level.SEVERE, null, ex);
                            }
           
            for (int s = 1; s <= randomNumber; s++) {
                //Cambio de posicion
                if (i >=50 ){
                    btnLanzardados.setVisible(false);
                    break;
                 }
                //Observamos si lo desbanco
                desbancar1 ();
                lblHalo.setVisible(false);
                lblHalo.setLocation(x[i],y[i]); 
                try{
                    
                            Thread.sleep(300);
                            lblHalo.setVisible(true);
                            lblHalo.setLocation(x[i],y[i]);
                            lblHalo.setLocation(lblHalo.getX(),lblHalo.getY());
                            Thread.sleep(500);
                   
                        } catch (Exception e){
                            System.out.println(e.getMessage());
                        }                                                          
                i++;                
                System.out.println(i);   
                
            }   
            
            }
        subidas();
        bajadas();
        ganar(i);
            
    }
    public void desbancar1 (){
        if (BancoDeVariables.getdosJugadores() == true && i >0) {
            if (i == k) {
                desbancos1++;
                    k = 0;
                    String nombreJugador2 = BancoDeVariables.getjugador2();
                    lblNicknameDesbancado.setText(nombreJugador2);
                    lblPizarra2.setVisible(true);
                    lbldesbancar1.setVisible(true);
                    lblNicknameDesbancado.setVisible(true);
                    int delay2 = 2500; // Retraso de 600 milisegundos 
                                TimerTask task2 = new TimerTask() { //Averiguar bien que esto
                                    public void run() {
                                        // Acción a realizar cuando se complete el temporizador                                       
                                        lblPizarra2.setVisible(false);
                                        lbldesbancar1.setVisible(false);
                                        lblNicknameDesbancado.setVisible(false);
                                    }
                                };
                                Timer timer2 = new Timer();
                                timer2.schedule(task2, delay2);
                }
                                        }    
        
  
    }
    public void movimientoFichero2(int randomNumber) {
        //int j=1;
        
        //Movimiento de Fichero
        if (k <= 50) {
            
            btnLanzardados.setVisible(false);

            try {
                Thread.sleep(1500);
            } catch (InterruptedException ex) {
                Logger.getLogger(tablero.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (int s = 1; s <= randomNumber; s++) {
                //Cambio de posicion
                if (k >= 50) {
                    btnLanzardados.setVisible(false);
                    break;
                }
                //Observamos si lo desbanco
                desbancar2();
                lblHalo2.setVisible(false);
                lblHalo2.setLocation(x[k], y[k]);
                try {

                    Thread.sleep(300);
                    lblHalo2.setVisible(true);
                    lblHalo2.setLocation(x[k], y[k]);
                    lblHalo2.setLocation(lblHalo2.getX(), lblHalo2.getY());
                    Thread.sleep(500);

                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
                k++;
                System.out.println(k);

            }
            
        }
        subidas2();
        bajadas2();
        ganar(k);

    }
    public void desbancar2(){
        if (k==i){
                    desbancos2++;
                    i=0;
                    String nombreJugador1 = BancoDeVariables.getjugador1();
                    lblNicknameDesbancado.setText(nombreJugador1);
                    lblPizarra2.setVisible(true);
                    lbldesbancar1.setVisible(true);
                    lblNicknameDesbancado.setVisible(true);
                    int delay2 = 2500; // Retraso de 600 milisegundos 
                                TimerTask task2 = new TimerTask() { //Averiguar bien que esto
                                    public void run() {
                                        // Acción a realizar cuando se complete el temporizador                                       
                                        lblPizarra2.setVisible(false);
                                        lbldesbancar1.setVisible(false);
                                        lblNicknameDesbancado.setVisible(false);
                                    }
                                };
                                Timer timer2 = new Timer();
                                timer2.schedule(task2, delay2);
                }
    }
    
    public void hiloSubidaoBajada(){
        try {

                                Thread.sleep(600);
                                lblHalo.setVisible(true);
                                lblHalo.setLocation(x[i], y[i]);
                                lblHalo.setLocation(lblHalo.getX(), lblHalo.getY());
                                Thread.sleep(800);

                            } catch (Exception e) {
                                System.out.println(e.getMessage());
                            }   
    }
    public void hiloSubidaoBajada2(){
        try {

                                Thread.sleep(600);
                                lblHalo.setVisible(true);
                                lblHalo.setLocation(x[k], y[k]);
                                lblHalo.setLocation(lblHalo.getX(), lblHalo.getY());
                                Thread.sleep(800);

                            } catch (Exception e) {
                                System.out.println(e.getMessage());
                            }   
    }
    
    public void subidas() {
        switch (i) {
                    case 6:
                        {    
                            tablero casilla6 = new tablero();
                            hiloSubidaoBajada();
                            i=14;
                            hiloSubidaoBajada();                    
                            System.out.println(i);
                            //Tiempo de espera para aparecer el boton
                            casilla6.aparecerBtnLanzarDados();
                            escaleras_avanzadas1++;
                            break;
                        }
                    case 17:
                        {
                            tablero casilla17 = new tablero();
                            hiloSubidaoBajada();                          
                            i=23;
                            hiloSubidaoBajada();                         
                            System.out.println(i);
                            //Tiempo de espera para aparecer el boton
                            casilla17.aparecerBtnLanzarDados();
                            escaleras_avanzadas1++;
                            break;
                        }
                    case 27:
                        {
                            tablero casilla27 = new tablero();
                            hiloSubidaoBajada();                        
                            i=33;
                            hiloSubidaoBajada();                         
                            System.out.println(i);
                            //Tiempo de espera para aparecer el boton
                            casilla27.aparecerBtnLanzarDados();
                            escaleras_avanzadas1++;
                            break;
                        }
                    case 38:
                        {
                            tablero casilla38 = new tablero();
                            hiloSubidaoBajada();                          
                            i=43;
                            hiloSubidaoBajada();                         
                            System.out.println(i);
                            //Tiempo de espera para aparecer el boton
                            casilla38.aparecerBtnLanzarDados();
                            escaleras_avanzadas1++;
                            break;
                        }
                    default:
                        break;
                }
        
        desbancar1 ();
    }
    public void bajadas() {
        switch (i) {
                    case 16:
                        {    
                            tablero casilla16 = new tablero();
                            hiloSubidaoBajada();
                            i=3;
                            hiloSubidaoBajada();                       
                            System.out.println(i);
                            //Tiempo de espera para aparecer el boton                            
                            casilla16.aparecerBtnLanzarDados();
                            serpientes_retrocedidas1++;
                            break;
                        }
                    case 29:
                        {
                            tablero casilla29 = new tablero();
                            hiloSubidaoBajada();                        
                            i=10;
                            hiloSubidaoBajada();                       
                            System.out.println(i);
                            //Tiempo de espera para aparecer el boton
                            casilla29.aparecerBtnLanzarDados();
                            serpientes_retrocedidas1++;
                            break;
                        }
                    case 39:
                        {
                            tablero casilla39 = new tablero();
                            hiloSubidaoBajada();                      
                            i=20;
                            hiloSubidaoBajada();                          
                            System.out.println(i);
                            //Tiempo de espera para aparecer el boton
                            casilla39.aparecerBtnLanzarDados();
                            serpientes_retrocedidas1++;
                            break;
                        }
                    case 45:
                        {
                            tablero casilla45 = new tablero();
                            hiloSubidaoBajada();                   
                            i=34;
                            hiloSubidaoBajada();                         
                            System.out.println(i);
                            //Tiempo de espera para aparecer el boton
                            casilla45.aparecerBtnLanzarDados();
                            serpientes_retrocedidas1++;
                            break;
                        }
                    default:
                        break;
                }       
        desbancar1 ();
        btnLanzardados.setVisible(true);
        btnAbandonar.setVisible(true);
        
    }
    public void subidas2() {
        switch (k) {
                    case 6:
                        {    
                            tablero casilla6 = new tablero();
                            hiloSubidaoBajada2();
                            k=14;
                            hiloSubidaoBajada2();                      
                            System.out.println(k);
                            //Tiempo de espera para aparecer el boton
                            casilla6.aparecerBtnLanzarDados();
                            escaleras_avanzadas2++; 
                            break;
                        }
                    case 17:
                        {
                            tablero casilla17 = new tablero();
                            hiloSubidaoBajada2();                       
                            k=23;
                            hiloSubidaoBajada2();                       
                            System.out.println(k);
                            //Tiempo de espera para aparecer el boton
                            casilla17.aparecerBtnLanzarDados();
                            escaleras_avanzadas2++; 
                            break;
                        }
                    case 27:
                        {
                            tablero casilla27 = new tablero();
                            hiloSubidaoBajada2();                        
                            k=33;
                            hiloSubidaoBajada2();                         
                            System.out.println(k);
                            //Tiempo de espera para aparecer el boton
                            casilla27.aparecerBtnLanzarDados();
                            escaleras_avanzadas2++; 
                            break;
                        }
                    case 38:
                        {
                            tablero casilla38 = new tablero();
                            hiloSubidaoBajada2();                  
                            k=43;
                            hiloSubidaoBajada2();                   
                            System.out.println(k);
                            //Tiempo de espera para aparecer el boton
                            casilla38.aparecerBtnLanzarDados();
                            escaleras_avanzadas2++; 
                            break;
                        }
                    default:
                        break;
                }               
            desbancar2();
    }
    public void bajadas2() {
        switch (k) {
                    case 16:
                        {    
                            tablero casilla16 = new tablero();
                            hiloSubidaoBajada2();
                            k=3;
                            hiloSubidaoBajada2();                        
                            System.out.println(k);
                            //Tiempo de espera para aparecer el boton                            
                            casilla16.aparecerBtnLanzarDados();
                            serpientes_retrocedidas2++;
                            break;
                        }
                    case 29:
                        {
                            tablero casilla29 = new tablero();
                            hiloSubidaoBajada2();                         
                            k=10;
                            hiloSubidaoBajada2();                        
                            System.out.println(k);
                            //Tiempo de espera para aparecer el boton
                            casilla29.aparecerBtnLanzarDados();
                            serpientes_retrocedidas2++;
                            break;
                        }
                    case 39:
                        {
                            tablero casilla39 = new tablero();
                            hiloSubidaoBajada2();                    
                            k=20;
                            hiloSubidaoBajada2();                      
                            System.out.println(k);
                            //Tiempo de espera para aparecer el boton
                            casilla39.aparecerBtnLanzarDados();
                            serpientes_retrocedidas2++;
                            break;
                        }
                    case 45:
                        {
                            tablero casilla45 = new tablero();
                            hiloSubidaoBajada2();                        
                            k=34;
                            hiloSubidaoBajada2();                       
                            System.out.println(k);
                            //Tiempo de espera para aparecer el boton
                            casilla45.aparecerBtnLanzarDados();
                            serpientes_retrocedidas2++;
                            break;
                        }
                    default:
                        break;
                }       
        desbancar2();
        btnLanzardados.setVisible(true);
        btnAbandonar.setVisible(true);       
    }
    public void ganar(int i){
        if (i >= 50) {
            switch (jugador) {
                case 1:
                    BancoDeVariables.setWinJugador1(true);
                    
                    break;
                case 2:
                    BancoDeVariables.setWinJugador2(true);
                    break;
                default:
                    BancoDeVariables.setWinJugador1(false);
                    BancoDeVariables.setWinJugador2(false);
                    break;
            }
            btnLanzardados.setVisible(false);
            btnAgain1.setVisible(true);
            btnAtras.setVisible(true);
            btnScore1.setVisible(true);
            lblDados.setVisible(false);
            lblHalo.setVisible(false);
            lblNumeros.setVisible(false);            
            ImageIcon ico2 = new ImageIcon(getClass().getResource("/Recursos/Ganaste.gif"));
          //  lblGanaste.setVisible(true);
            lblGanaste.setIcon(ico2);
            conexionTablaJuego();
        }
        else {
            BancoDeVariables.setWinJugador1(false);
            aparecerTurno();
        }
        
    }
    
    public void imagen(boolean halo){
        if (halo == true){
            ImageIcon ico =new ImageIcon(getClass().getResource("/Recursos/Halo.png"));
            lblHalo2.setIcon(ico);
            System.out.println("Halo");
        }
        else if (halo == false){
            ImageIcon ico =new ImageIcon(getClass().getResource("/Recursos/cortan.png"));
            lblHalo2.setIcon(ico);
            System.out.println("Cortana");
        }
    }
     public void imagen2(boolean halo2){
        if (halo2 == true){
            ImageIcon ico =new ImageIcon(getClass().getResource("/Recursos/Halo.png"));
            lblHalo.setIcon(ico);
            System.out.println("Halo");
        }
        else if (halo2 == false){
            ImageIcon ico =new ImageIcon(getClass().getResource("/Recursos/cortan.png"));
            lblHalo.setIcon(ico);
            System.out.println("Cortana");
        }
    }
    public void aparecerBtnLanzarDados(){
        //Tiempo de espera para aparecer el boton
                                int delay2 = 600; // Retraso de 600 milisegundos 
                                TimerTask task2 = new TimerTask() { //Averiguar bien que esto
                                    public void run() {
                                        // Acción a realizar cuando se complete el temporizador
                                        btnLanzardados.setVisible(true);
                                        btnAbandonar.setVisible(true);                                       
                                    }
                                };
                                Timer timer2 = new Timer();
                                timer2.schedule(task2, delay2);
    
}
    public void aparecerTurno(){
        //Tiempo de espera para aparecer el boton
                                int delay2 = 300; // Retraso de 600 milisegundos 
                                TimerTask task2 = new TimerTask() { //Averiguar bien que esto
                                    public void run() {
                                        // Acción a realizar cuando se complete el temporizador                                       
                                        if (BancoDeVariables.getdosJugadores() == true) {
                                            turno();
                                        }                                        
                                    }
                                };
                                Timer timer2 = new Timer();
                                timer2.schedule(task2, delay2);
    
}
    
    
     public JPanel getFondo5() {
        return panel_tablero;
    }
    private void showPanel5(JPanel p){
            p.setSize(1150, 694);
            p.setLocation(0, 0);
            panel_tablero.removeAll();
            panel_tablero.add(p, new org.netbeans.lib.awtextra.AbsoluteConstraints(0,0,-1,-1));
            panel_tablero.revalidate();
            panel_tablero.repaint();
        }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbandonar;
    private javax.swing.JButton btnAgain1;
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnLanzardados;
    private javax.swing.JButton btnScore1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblDados;
    private javax.swing.JLabel lblGanaste;
    private javax.swing.JLabel lblHalo;
    private javax.swing.JLabel lblHalo2;
    private javax.swing.JLabel lblNickname;
    private javax.swing.JLabel lblNickname1;
    private javax.swing.JLabel lblNicknameDesbancado;
    private javax.swing.JLabel lblNumeros;
    private javax.swing.JLabel lblPizarra;
    private javax.swing.JLabel lblPizarra2;
    private javax.swing.JLabel lbldesbancar1;
    private javax.swing.JPanel panel_tablero;
    // End of variables declaration//GEN-END:variables
}
